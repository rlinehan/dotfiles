[user]
  name = Ruth Linehan
  email = ruth.linehan@gmail.com
[includeIf "gitdir:~/github/"]
  path = .gitconfig-github
[github]
  user = rlinehan
#[push]
#  default = simple
[credential]
  helper = osxkeychain
[merge]
  conflictstyle = diff3
[color]
  diff = auto
  status = auto
  branch = auto
[alias]
  lg = "log --pretty=format:'%C(yellow)%h%C(reset) %s %C(cyan)%ar%C(reset) %C(blue)%an%C(reset) %C(green)%d%C(reset)' --graph --date-order"
  # shorten for performance
  lgs = "log --pretty=format:'%C(yellow)%h%C(reset) %s %C(cyan)%ar%C(reset) %C(blue)%an%C(reset) %C(green)%d%C(reset)' --graph --date-order --since='1 month ago'"
  # just show this branch
  lgb= "log --pretty=format:'%C(yellow)%h%C(reset) %s %C(cyan)%ar%C(reset) %C(blue)%an%C(reset) %C(green)%d%C(reset)' --graph --date-order master.."

  co = "checkout --no-guess"
  # checkout interactive, with branch preview, create new local branch for
  # remote branches (strip `remote/origin`)
  coi = "! git branch -a | cut -c 3- | fzf --reverse --preview 'git log --patch --color {}...{}~5' | sed 's:remotes/origin/::' | xargs git checkout "

  # checkout a branch, given a PR number (in a centralized GitHub workflow)
  copr = "! f() { git checkout `get_branch_for_pr $1` ;}; f"

  # push a sha to origin on the currently named branch (creating it if
  # necessary)
  psha = "! f() { git push origin $1:refs/heads/`git rev-parse --abbrev-ref HEAD` ;}; f"
  # force push to reset current branch to provided SHA
  pshaf = "! f() { git push -f origin $1:refs/heads/`git rev-parse --abbrev-ref HEAD` ;}; f"

  # pull with a rebase
  repull = "! f() { git pull --rebase origin `git rev-parse --abbrev-ref HEAD` ;}; f"

  st = "status"
  rt = "remote"

  setup = "! f() { git branch --set-upstream-to=origin/`git rev-parse --abbrev-ref HEAD` `git rev-parse --abbrev-ref HEAD` ;}; f"

  ra = "! f() { git remote add $1 git@github.com:$1/$(basename $(git remote show -n origin | grep Fetch | cut -d: -f2-)); git remote -v;}; f"
  cl = "! f() { git clone git@github.com:rlinehan/$1.git ;}; f"

  vimadd = "! f() { git subtree add --prefix .vim/bundle/$2 https://github.com/$1/$2.git master --squash;}; f"
  vimupdate = "! f() { git subtree pull --prefix .vim/bundle/$2 https://github.com/$1/$2.git master --squash -m \"Merge commit `git rev-parse FETCH_HEAD` from `cut -f 3 $(git rev-parse --git-dir)/FETCH_HEAD`\";}; f"

  changelog = "log --pretty=format:'%ad - %aN <%aE>%n * %s (%h)%n' --date=short --date-order --no-merges --patience -M -C -C -c"

  # Usage: $ git pr <remote> <pull request number> <pull request branch description>
  #
  # Example: $ git pr foo 37 pr-i-want-to-test
  #
  # Pulls down PR #37 from remote foo (assuming foo is a github repository) to
  # branch PR-37-pr-i-want-to-test and checks this branch out.
  pr = "! f() { git fetch $1 pull/$2/head:PR-$2-$3 && git checkout PR-$2-$3;}; f"

  # Usage: $ git prupdate <remote> <pull request number>
  #
  # Example: $ git prupdate foo 37
  #
  # Fetches pull request 37 from remote foo and merges to current branch
  # (usually a PR created with the `pr` alias above. Only works if PR has not
  # been force-pushed to.
  prupdate = "! f() { git fetch $1 pull/$2/head && git merge FETCH_HEAD;}; f"

  # given a remote and a branch, fetch the remote, merge the branch locally,
  # and push to Github - for use in a distributed workflow (users fork the
  # repo and push to their own branches)
  update = "! f() { git checkout $2 && git fetch $1 && git merge $1/$2 --ff-only && git push origin HEAD;}; f"

  # checkout a branch and do a pull to update it (for use in a centralized
  # GitHub workflow)
  evolve = "! f() { git checkout $1 && git pull;}; f"

[rerere]
  enabled = 1
[core]
  editor = vim
  excludesfile = ~/.git-ignore
  autocrlf = input
  safecrlf = true
[push]
  default = current
[pull]
	ff = only
[fetch]
	prune = true
[init]
	defaultBranch = main
